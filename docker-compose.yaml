version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    restart: unless-stopped
    container_name: zookeeper
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_log:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  akhq:
    container_name: akhq
    image: tchiotludo/akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka_1:9092,kafka_2:9092,kafka_3:9092,kafka_4:9092"
      # schema-registry:
      #   url: "http://schema-registry:8085"
      # connect:
      #   - name: "connect"
      #     url: "http://connect:8083"

    ports:
      - 8090:8080
    depends_on:
      - zookeeper
      - kafka_1
      - kafka_2
      - kafka_3
      - kafka_4
      # schema-registry:
      #   condition: service_started
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8084:8080"
    restart: always
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: 'kafka_cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka_1:9092,kafka_2:9092,kafka_3:9092,kafka_4:9092'
      KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:32181'
    depends_on:
      - zookeeper
      - kafka_1
      - kafka_2
      - kafka_3
      - kafka_4
    networks:
      - kafka-network

  kafka_1:
    container_name: kafka_1
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    volumes:
      - kafka_1_data:/var/lib/kafka/data
      - kafka_1_secrets:/etc/kafka/secrets
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_1:9092,OUTSIDE://127.0.0.1:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - kafka-network

  kafka_2:
    container_name: kafka_2
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    volumes:
      - kafka_2_data:/var/lib/kafka/data
      - kafka_2_secrets:/etc/kafka/secrets
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9095
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_2:9092,OUTSIDE://127.0.0.1:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - kafka-network

  kafka_3:
    container_name: kafka_3
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    volumes:
      - kafka_3_data:/var/lib/kafka/data
      - kafka_3_secrets:/etc/kafka/secrets
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "9096:9096"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9096
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_3:9092,OUTSIDE://127.0.0.1:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - kafka-network

  kafka_4:
    container_name: kafka_4
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    volumes:
      - kafka_4_data:/var/lib/kafka/data
      - kafka_4_secrets:/etc/kafka/secrets
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    ports:
      - "9097:9097"
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9097
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_4:9092,OUTSIDE://127.0.0.1:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
    networks:
      - kafka-network

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:latest
  #   container_name: schema-registry
  #   restart: unless-stopped
  #   depends_on:
  #     - kafka_1
  #     - kafka_2
  #     - kafka_3
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka_1:9092,kafka_2:9092,kafka_3:9092'
  #     SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
  #     SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
  #     SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  # connect:
  #   image: confluentinc/cp-kafka-connect:latest
  #   container_name: connect
  #   restart: unless-stopped
  #   depends_on:
  #     - kafka_1
  #     - kafka_2
  #     - kafka_3
  #     - schema-registry
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'kafka_1:9092,kafka_2:9092,kafka_3:9092'
  #     CONNECT_REST_PORT: '8083'
  #     CONNECT_REST_LISTENERS: 'http://0.0.0.0:8083'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'
  #     CONNECT_CONFIG_STORAGE_TOPIC: '__connect-config'
  #     CONNECT_OFFSET_STORAGE_TOPIC: '__connect-offsets'
  #     CONNECT_STATUS_STORAGE_TOPIC: '__connect-status'
  #     CONNECT_GROUP_ID: 'kafka-connect'
  #     CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'true'
  #     CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
  #     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
  #     CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'true'
  #     CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
  #     CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
  #     CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
  #     CONNECT_PLUGIN_PATH: ' /usr/share/java/'

  # ksqldb:
  #   image: confluentinc/cp-ksqldb-server:latest
  #   restart: unless-stopped
  #   depends_on:
  #     - kafka
  #     - connect
  #     - schema-registry
  #   ports:
  #     - 8088:8088
  #   environment:
  #     KSQL_BOOTSTRAP_SERVERS: 'kafka_1:9092,kafka_2:9092,kafka_3:9092'
  #     KSQL_LISTENERS: 'http://0.0.0.0:8088'
  #     KSQL_KSQL_SERVICE_ID: 'ksql'
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
  #     KSQL_KSQL_CONNECT_URL: 'http://connect:8083'
  #     KSQL_KSQL_SINK_PARTITIONS: '1'
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: '1'
  
  # db:
  #   image: postgres:15
  #   container_name: db
  #   restart: unless-stopped
  #   volumes:
  #     - db_data:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: kafka_db
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - kafka-network

volumes:
  zk_data:
  zk_log:

  kafka_1_data:
  kafka_2_data:
  kafka_3_data:
  kafka_4_data:

  kafka_1_secrets:
  kafka_2_secrets:
  kafka_3_secrets:
  kafka_4_secrets:

  db_data:

networks:
  kafka-network:
    driver: bridge
